
[ ]
print("Welcome to NumPy 4")
Welcome to NumPy 4
#np.vectorize

[ ]
import numpy as np
a=np.arange(1,11)
import math
func=np.vectorize(math.log)
func(a)
array([0.        , 0.69314718, 1.09861229, 1.38629436, 1.60943791,
       1.79175947, 1.94591015, 2.07944154, 2.19722458, 2.30258509])
[ ]
def cube(s):
  return s**3
func1=np.vectorize(cube)
func1(a)
array([   1,    8,   27,   64,  125,  216,  343,  512,  729, 1000])
[ ]
a=np.arange(4)
[ ]
print(a)
[100 100   2   3]
[ ]
b=a.reshape((2,2))
b
array([[100, 100],
       [  2,   3]])
Copy
[ ]
import numpy as np
a=np.arange(10)
[ ]
b=a
[ ]
b
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
[ ]
c=a.copy()
[ ]
c
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
[ ]
c[0] = 100
c
array([100,   1,   2,   3,   4,   5,   6,   7,   8,   9])
[ ]
a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
[ ]
np.shares_memory(a,c)
False
[ ]
id(a)
140485601637840
[ ]
id(b)
140485601637840
[ ]
id(c)
140485467456880
[ ]

** ** VIEWS

[ ]
d=a.view()
d
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
3D Matrices

[ ]
import numpy as np
e=np.arange(1,25).reshape(2,3,4)
e
array([[[ 1,  2,  3,  4],
        [ 5,  6,  7,  8],
        [ 9, 10, 11, 12]],

       [[13, 14, 15, 16],
        [17, 18, 19, 20],
        [21, 22, 23, 24]]])
[ ]
np.sum(e,axis=0)
array([[14, 16, 18, 20],
       [22, 24, 26, 28],
       [30, 32, 34, 36]])
[ ]
np.sum(e,axis=1)
array([[15, 18, 21, 24],
       [51, 54, 57, 60]])
[ ]
np.sum(e,axis=2)
array([[10, 26, 42],
       [58, 74, 90]])
[ ]
e[0,:,:]
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
[ ]
e[0]
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
[ ]
e[::,::,::2]
array([[[ 1,  3],
        [ 5,  7],
        [ 9, 11]],

       [[13, 15],
        [17, 19],
        [21, 23]]])
#Splitting - Split divides array into equal parts

[ ]
e=np.arange(1,21)
np.split(e,4)
[array([1, 2, 3, 4, 5]),
 array([ 6,  7,  8,  9, 10]),
 array([11, 12, 13, 14, 15]),
 array([16, 17, 18, 19, 20])]
[ ]
np.split(e,2)
[array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),
 array([11, 12, 13, 14, 15, 16, 17, 18, 19, 20])]
[ ]
np.split(e,[3,5,11])
[array([1, 2, 3]),
 array([4, 5]),
 array([ 6,  7,  8,  9, 10, 11]),
 array([12, 13, 14, 15, 16, 17, 18, 19, 20])]
[ ]
np.split(e,[6,10,17,24])
[array([1, 2, 3, 4, 5, 6]),
 array([ 7,  8,  9, 10]),
 array([11, 12, 13, 14, 15, 16, 17]),
 array([18, 19, 20]),
 array([], dtype=int64)]
[ ]
e
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20])
[ ]
e.reshape(4,5)
array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20]])
[ ]
np.split(e,2,axis=0)
[array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),
 array([11, 12, 13, 14, 15, 16, 17, 18, 19, 20])]
[ ]
f=np.arange(1,31).reshape(5,6)
[ ]
f
array([[ 1,  2,  3,  4,  5,  6],
       [ 7,  8,  9, 10, 11, 12],
       [13, 14, 15, 16, 17, 18],
       [19, 20, 21, 22, 23, 24],
       [25, 26, 27, 28, 29, 30]])
[ ]
np.split(f,2,axis=1)
[array([[ 1,  2,  3],
        [ 7,  8,  9],
        [13, 14, 15],
        [19, 20, 21],
        [25, 26, 27]]), array([[ 4,  5,  6],
        [10, 11, 12],
        [16, 17, 18],
        [22, 23, 24],
        [28, 29, 30]])]
[ ]
arr1 = np.array([1,2,3,6,3,2]) 
arr2 = np.array([4,2,1,3,3,2]) 
arr3 = np.zeros(len(arr1)) 

for i in range(len(arr1)): 
    arr3[i] = arr1[i] * arr2[i] 
    
def cube(s):
  return s**3
func1=np.vectorize(cube)
func1(a)
[2]
0s
import numpy as np
g=np.arange(1,31). reshape(3,10)
g
array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])
[12]
0s
np.vsplit(g,3)
[array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]]),
 array([[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]),
 array([[21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])]
[13]
0s
np.hsplit(g,2)
[array([[ 1,  2,  3,  4,  5],
        [11, 12, 13, 14, 15],
        [21, 22, 23, 24, 25]]), array([[ 6,  7,  8,  9, 10],
        [16, 17, 18, 19, 20],
        [26, 27, 28, 29, 30]])]
[15]
0s
h=np.array((1,2,3,4))
i=np.array((5,6,7,8))
np.vstack((h,i))
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])
[16]
0s
np.hstack((h,i))
array([1, 2, 3, 4, 5, 6, 7, 8])
[17]
1s
arr = np.arange(10)
np.split(arr, [5, 12])
[array([0, 1, 2, 3, 4]), array([5, 6, 7, 8, 9]), array([], dtype=int64)]
[18]
0s
arr = np.arange(10)
np.split(arr, 3)

[20]
import numpy as np
arr=np.array([2,4,6,8,10])
c0 = arr
c0[0]=12
print(arr)                   ##### this means when there is no .view then also shallow copy is copied 
arr=np.array([2,4,6,8,10])
c1=arr.view()
arr[0] = 12
print(c1)
arr=np.array([2,4,6,8,10])

[12  4  6  8 10]
[12  4  6  8 10]
[ 2  4  6  8 10]
